import:
	java.util.regex.Pattern
	
function NewToken(type: string, value: object, posStart: integer=-1, posEnd: integer=-1) :: object:
	set {_nbt} to nbt from "{}"
	set string tag "type" of {_nbt} to {_type}
	set string tag "value" of {_nbt} to "%{_value}%"
	set int tag "posStart" of {_nbt} to {_posStart}
	set int tag "posEnd" of {_nbt} to {_posEnd}
	return {_nbt}
	
function GetTokenType(nbt: nbt compound) :: string:
	return string tag "type" of {_nbt}

function GetTokenValue(nbt: nbt compound) :: string:
	return string tag "value" of {_nbt}
	
function GetTokenStart(nbt: nbt compound) :: integer:
	return int tag "posStart" of {_nbt}
	
function GetTokenEnd(nbt: nbt compound) :: integer:
	return int tag "posEnd" of {_nbt}
	
function randomId() :: integer:
	add 1 to {SP::CurrentID}
	return {SP::CurrentID}
	
function TokeniseLine(line: string, id: integer=randomId()) :: object:
	set {SP::Lines::%{_id}%::RawString} to {_line}
	
	TokeniseLinePart({_line}, {_id}, 0, 0, {_tokens})
	loop reversed {SP::Lines::%{_id}%::Tokens::*}:
		broadcast "%nl%--- Token ---"
		broadcast "Type: %GetTokenType(loop-value)%"
		broadcast "Value: %GetTokenValue(loop-value)%"
		broadcast "Start: %GetTokenStart(loop-value)%"
		broadcast "End: %GetTokenEnd(loop-value)%"
		
		set {_start} to GetTokenStart(loop-value)
		set {_end} to GetTokenEnd(loop-value)
		set {_type} to GetTokenType(loop-value)
		
		set {_line} to join {_line}.substring(0, {_start}), "%%%{_type}%%%", {_line}.substring({_end})
		
	broadcast "%nl%Tokenised: &c%{_line}%"
	
function TokeniseLinePart(line: string, id: number, start: integer, end: integer, iteration: number=0):
	create new section stored in {_run}:
		if {_start} > (length of {_line}):
			broadcast "&aParsed in %difference between now and {start}%"
			broadcast "Iterations required: %{_iteration}%"
			stop
			
		add 1 to {_iteration}
		if {_iteration} > 1000000:
			broadcast "&aParsed in %difference between now and {start}%"
			broadcast "Iterations required && too many: %{_iteration}%"
			stop
			
		set {SP::Lines::%{_id}%::Start} to {_start}
		set {SP::Lines::%{_id}%::End} to {_end}
		
		set {_part} to {_line}.substring({_start}, {_end})
		set {_matchToken} to MatchLinePart({_id}, {_part})
		
		if {_matchToken} is set:
			set {_start} to {_end}
			add {_matchToken} to {SP::Lines::%{_id}%::Tokens::*}
		else:
			add 1 to {_end}
			if {_end} >= (length of {_line} + 1):
				add 1 to {_start}
				set {_end} to {_start}
			
		TokeniseLinePart({_line}, {_id}, {_start}, {_end}, {_iteration})
	run section {_run} sync
	
function CanPeek(id: number) :: boolean:
	return false if {SP::Lines::%{_id}%::End} >= (length of {SP::Lines::%{_id}%::RawString}) else true
	
function Peek(id: number) :: string:
	set {_end} to {SP::Lines::%{_id}%::End}
	return {SP::Lines::%{_id}%::RawString}.substring({_end},{_end}+1)
	
function MatchLinePart(id: number, s: string) :: nbt compound:
	
	set {_start} to {SP::Lines::%{_id}%::Start}
	set {_end} to {SP::Lines::%{_id}%::End}
	
	if length of {_s} >= 3:
		set {_copy} to {_s}
		if {_copy} starts with """":
			if {_copy} ends with """":
				set {_copy} to {_copy}.substring(1,(length of {_copy} - 1))
				broadcast "&eCopy Pre Change: %{_copy}%"
				replace all """""" in {_copy} with ""
				broadcast "&aCopy Pre: %{_copy}%"
				if {_copy} does not contain """":
					set {_continue} to false
					if CanPeek({_id}) is true:
						if Peek({_id}) != """":
							set {_continue} to true
					else:
						set {_continue} to true
						
					if {_continue} = true:
						set boolean tag "Matches" of {_nbt} to true
						set {_v} to {_s}.substring(1,(length of {_s} - 1))
						replace all """""" in {_v} with """"
						return NewToken("string", {_v}, {_start}, {_end})
		
		
function TokeniseLines(a: strings):
	loop {_a::*}:
		TokeniseLine(loop-value)
	
function RegisterEffect(pattern: string, id: number=randomId()):
	set {SP::Lang::Effects::%{_id}%::Pattern} to {_pattern}
	
function RegisterExpression(pattern: string, type: string, isPlural: boolean=false, id: number=randomId()):
	set {SP::Lang::Expressions::%{_id}%::Pattern} to {_pattern}
	set {SP::Lang::Expressions::%{_id}%::Type} to {_type}
	set {SP::Lang::Expressions::%{_id}%::IsPlural} to {_isPlural}
	
function WorsePossibleCase(lineLength: number) :: number:
	return ({_lineLength} + 1) * ({_lineLength} + 2) / 2

	
on load:
	delete {SP::*}
	
	RegisterEffect("broadcast %%string%% to %%players%%")
	RegisterExpression("all players", "players", true)
	
	set {start} to now
	set {_toParse} to "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	#set {_toParse} to "send ""hello world"" to all players"
	TokeniseLines({_toParse})
	
